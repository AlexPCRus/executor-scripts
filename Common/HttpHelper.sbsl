@Global
method Get(Url: String): HttpResponse
    val Request = HttpClient.GetRequest(Url)
    return Request.Execute()
;

@Global
method GetBytes(Url: String): Bytes
    val Request = HttpClient.GetRequest(Url)
    use Stream = Request.Execute().Body
    
    return Stream.ReadAsBytes()
;

// using only with "use" operator 
@Global
method GetStream(Url: String): ReadableStream
    val Request = HttpClient.GetRequest(Url)
    return Request.Execute().Body
;

@Global
method GetString(Url: String, Encoding = Encoding.Utf8): String
    val Request = HttpClient.GetRequest(Url)
    use Stream = Request.Execute().Body

    return Stream.ReadAsString(Encoding)
;

@Global
method Post(Url: String, Body: String | Bytes | ReadableStream | File): HttpResponse
    val Request = HttpClient.PostRequest(Url)
    SetRequestBody(Request, Body)
    
    return Request.Execute()
;

@Global
method Put(Url: String, Body: String | Bytes | ReadableStream | File): HttpResponse
    val Request = HttpClient.PutRequest(Url)
    SetRequestBody(Request, Body)
    
    return Request.Execute()
;

@Global
method Patch(Url: String, Body: String | Bytes | ReadableStream | File): HttpResponse
    val Request = HttpClient.PatchRequest(Url)
    SetRequestBody(Request, Body)
    
    return Request.Execute()
;

method SetRequestBody(Request: HttpRequest, Body: String | Bytes | ReadableStream | File)
    if Body is String
        Request.SetBody(Body as String)
    else if Body is Bytes
        val Data = Body as Bytes

        use InStream = new TemporaryWritableStream(Data.Size())
        InStream.Write(Data)

        use OutStream = InStream.OpenReadableStream()
        Request.SetBody(OutStream)
    else if Body is ReadableStream
        Request.SetBody(Body as ReadableStream)
    else if Body is File
        Request.SetBody(Body as File)
    ;
;