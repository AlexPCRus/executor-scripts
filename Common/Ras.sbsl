@Global
method CreateInfobaseIfNotExists(
    Infobase: String,
    SqlServer: String,
    SqlUser: String,
    SqlPassword: String,
    RasAddress = "localhost",
    RasPort = 1545)
    use Administration = new V8ServerAdministration(RasAddress, RasPort)
    Administration.Authenticate()

    val Cluster = Administration.GetClusters().FirstOrDefault()
    Cluster.Authenticate()

    val InfobaseDescription = Cluster.GetInfobases().Filter(c -> c.Name.ToLowerCase() == Infobase.Trim().ToLowerCase()).FirstOrDefault()
    if InfobaseDescription == Undefined
        val NewInfobase = Cluster.CreateInfobase()
        NewInfobase.CreateDatabase = False
        NewInfobase.DataBaseName = Infobase
        NewInfobase.DatabaseServer = SqlServer
        NewInfobase.DatabaseUser = SqlUser
        NewInfobase.DatabaseUserPassword = SqlPassword
        NewInfobase.DateOffset = 2000
        NewInfobase.Dbms = "MSSQLServer"
        NewInfobase.Locale = "ru"
        NewInfobase.Name = Infobase

        try 
            NewInfobase.Write()
        catch Exception: unknown  
        ;
    ;
;

@Global
method BlockConnections(
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    RasAddress = "localhost",
    RasPort = 1545)
    use Administration = new V8ServerAdministration(RasAddress, RasPort, 10s)
    Administration.Authenticate()

    val Cluster = Administration.GetClusters().FirstOrDefault()
    Cluster.Authenticate()

    val InfobaseDescription = Cluster.GetInfobases().Filter(c -> c.Name.ToLowerCase() == Infobase.Trim().ToLowerCase()).FirstOrDefault()
    val Ib = InfobaseDescription.Authenticate(User, Password)
    
    val BeginTimestamp = DateTime.Now()
    Ib.LockBeginTime = BeginTimestamp.ToInstant(TimeZone.Current())

    Ib.LockMessage = "Технические работы"
    Ib.SessionStartPermissionCode = AccessCode
    Ib.LockScheduledJobs = True
    Ib.SessionsLockEnabled = True
    Ib.Write()

    Ib.GetConnections()
        .Filter(c -> c.ApplicationName.ToUpperCase() != "RAS")
        .ForEach(c -> CloseConnection(c)) 
;

method CloseConnection(Connection: V8Connection)
    try
        Connection.Disconnect()
    catch Exception: unknown
    ;
;

@Global
method UnblockConnections(
    Infobase: String,
    User: String,
    Password: String,
    RasAddress = "localhost",
    RasPort = 1545)
    use Administration = new V8ServerAdministration(RasAddress, RasPort, 10s)
    Administration.Authenticate()

    val Cluster = Administration.GetClusters().FirstOrDefault()
    Cluster.Authenticate()

    val InfobaseDescription = Cluster.GetInfobases().Filter(c -> c.Name.ToLowerCase() == Infobase.Trim().ToLowerCase()).FirstOrDefault()
    val Ib = InfobaseDescription.Authenticate(User, Password)

    Ib.LockScheduledJobs = False
    Ib.SessionsLockEnabled = False
    Ib.Write()  
;