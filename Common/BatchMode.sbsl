#required Processes.sbsl
#required V8.sbsl
#required FilesHelper.sbsl
#required SshAgentConnection.sbsl
#required Net.sbsl
#required Xml.sbsl
#required ConfigInfo.sbsl

@Global
method GetConfigInfo(
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    Extension = "",
    PlatformVersion = ""): ConfigInfo.Class?
    val SshAgentBaseDir = Files.CreateTempDirectory("", True)
    val SshAgent = StartSshAgent(PlatformVersion, Server, Infobase, SshAgentBaseDir.Path)
    
    try 
        if Net.LocalPortIsOpen(1543, 20)
            Pause(Duration.OfMilliseconds(100))
            
            val ConfigFile = Files.CreateTempFile()
            FilesHelper.WriteToFile(ConfigFile.Path, "Configuration")
            SshAgentConnection.UploadFile(User, Password, ConfigFile.Path)

            use Connection = SshAgentConnection.Open(User, Password)
            use Console = Connection.OpenConsole(True)
            Console.PromptString = "designer> "

            SshAgentConnection.ConnectIB(Console)
            if Extension == ""
                SshAgentConnection.UploadConfiguration(Console, ConfigFile.Name)
            else
                SshAgentConnection.UploadExtension(Console, ConfigFile.Name, Extension)
            ;
            SshAgentConnection.DisconnectIB(Console)
            SshAgentConnection.Shutdown(Console)
            SshAgentConnection.Close(Console)

            val ConfigurationFile = SshAgentConnection.DownloadFile(User, Password, "Configuration.xml")
            SshAgent.Stop()

            return V8.ConfigInfoFromConfiguration(ConfigurationFile)
        else
            Console.Write("Waiting for the opening port timeout is expired")
        ;
    finally
        SshAgent.Stop()   
    ;

    return Undefined
;

@Global
method UpdateConfiguration(
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    CfuPath: String,
    PlatformVersion = ""): Number
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    val OutFile = Files.CreateTempFile()

    val Args = DesignerBatchModeArguments(
        Server,
        Infobase,
        User,
        Password,
        AccessCode
    )
    Args.Add("/Out\"${OutFile}\"")
    Args.Add("/UpdateCfg\"${CfuPath}\"")
    Args.Add("/UpdateDBCfg -Dynamic- -Server -SessionTerminate force")
    
    val ExitCode = Processes.Run(Platform.ExecutablePath, Args)
    RedirectOutToConsole(OutFile)

    return ExitCode
;

@Global
method UpdateExtension(
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    ExtensionName: String,
    ExtensionPath: String,
    PlatformVersion = ""): Number
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    val OutFile = Files.CreateTempFile()

    val Args = DesignerBatchModeArguments(
        Server,
        Infobase,
        User,
        Password,
        AccessCode
    )
    Args.Add("/Out\"${OutFile}\"")

    if new File(ExtensionPath).Extension.ToUpperCase() == "CFE"
        Args.Add("/LoadCfg\"${ExtensionPath}\" -Extension${ExtensionName}")
    else
        Args.Add("/LoadConfigFromFiles\"${ExtensionPath}\" -Extension${ExtensionName}")
    ;

    Args.Add("/UpdateDBCfg -Dynamic- -Server -SessionTerminate force")
    
    val ExitCode = Processes.Run(Platform.ExecutablePath, Args)
    RedirectOutToConsole(OutFile)

    return ExitCode
;

@Global
method StartSshAgent(
    PlatformVersion: String,
    Server: String,
    Infobase: String,
    AgentBaseBir: String = "",
    Port: Number = 1543): OsProcess
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    if AgentBaseBir.Length() == 0
        AgentBaseBir = Files.CreateTempDirectory().Path
    ;

    val Args = [
        "DESIGNER",
        "/S ${Server}\\${Infobase}",
        "/AgentMode",
        "/AgentPort ${Port.ToString().Replace(" ", "")}",
        "/AgentSSHHostKeyAuto",
        "/AgentBaseDir ${AgentBaseBir}"
    ]
    val Process = new OsProcess(Platform.ExecutablePath, Args, True)
    Process.Start()

    return Process
;

method RedirectOutToConsole(OutFile: File)
    use OutputStream = OutFile.OpenReadableStream()
    val OutputStreamContent = OutputStream.ReadAsString()

    if (OutputStreamContent.Length() > 0)
        Console.Write(OutputStreamContent)
    ;
;

method DesignerBatchModeArguments(
    Server: String, 
    Infobase: String, 
    User: String, 
    Password: String,
    AccessCode: String = ""): Array<String>
    val Args = [
        "DESIGNER",
        "/S${Server}\\${Infobase}",
        "/N${User}",
        "/P${Password}",
        "/DisableStartupMessages",
        "/DisableStartupDialogs"
    ]

    if AccessCode.Length() > 0
        Args.Add("/UC${AccessCode}")
    ;

    return Args
;