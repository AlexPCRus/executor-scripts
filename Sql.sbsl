#required IO.sbsl

@Global
method CreateDatabaseFromLastBackup(
    Server: String,
    Database: String,
    User: String,
    Password: String,
    NewDatabaseName: String)
    use Connection = BuildConnection(Server, Database, User, Password)

    val DatabaseFiles = GetDatabaseFileNames(Connection, Database)
    val FullBackup = GetLastFullBackup(Connection, Database)

    RestoreBackup(Connection, DatabaseFiles, FullBackup, NewDatabaseName)
;

method GetLastFullBackup(Connection: SqlConnection, Database: String): FullBackup
    val Query = Connection.CreateQueryWithSelect(
        "SELECT  
        A.[Server],
        A.database_name,
        A.last_db_backup_date,  
        B.backup_start_date,  
        B.expiration_date, 
        B.backup_size,  
        B.logical_device_name,  
        B.physical_device_name,   
        B.backupset_name, 
        B.description 
        FROM 
        ( 
        SELECT   
            CONVERT(CHAR(100), SERVERPROPERTY('Servername')) AS Server, 
            msdb.dbo.backupset.database_name,  
            MAX(msdb.dbo.backupset.backup_finish_date) AS last_db_backup_date 
        FROM 
            msdb.dbo.backupmediafamily  
            INNER JOIN msdb.dbo.backupset ON msdb.dbo.backupmediafamily.media_set_id = msdb.dbo.backupset.media_set_id  
        WHERE 
            msdb..backupset.type = 'D' 
        GROUP BY 
            msdb.dbo.backupset.database_name  
        ) AS A 
        LEFT JOIN  
        ( 
        SELECT   
            CONVERT(CHAR(100), SERVERPROPERTY('Servername')) AS Server, 
            msdb.dbo.backupset.database_name,  
            msdb.dbo.backupset.backup_start_date,  
            msdb.dbo.backupset.backup_finish_date, 
            msdb.dbo.backupset.expiration_date, 
            msdb.dbo.backupset.backup_size,  
            msdb.dbo.backupmediafamily.logical_device_name,  
            msdb.dbo.backupmediafamily.physical_device_name,   
            msdb.dbo.backupset.name AS backupset_name, 
            msdb.dbo.backupset.description 
        FROM 
            msdb.dbo.backupmediafamily  
            INNER JOIN msdb.dbo.backupset ON msdb.dbo.backupmediafamily.media_set_id = msdb.dbo.backupset.media_set_id  
        WHERE 
            msdb..backupset.type = 'D' 
        ) AS B 
        ON A.[server] = B.[server] AND A.[database_name] = B.[database_name] AND A.[last_db_backup_date] = B.[backup_finish_date]
        WHERE
            A.database_name = '${Database}'
        ORDER BY  
        A.database_name")

    use QResult = Query.Execute()
    QResult.Next()

    return new FullBackup(
        QResult.Get("physical_device_name").ToString()
    )
;

method GetDatabaseFileNames(Connection: SqlConnection, Database: String): DatabaseFiles
    val Query = Connection.CreateQueryWithSelect(
        "Select 
            d.name as DatabaseName,
            L.name as LogFileName,
            R.name as DataFileName,
            R.physical_name as DataFilePath,
            L.physical_name as LogFilePath
        FROM
            sys.databases AS D
            INNER JOIN sys.master_files AS L ON 
                D.database_id = L.database_id AND
                L.type_desc = 'LOG'
            INNER JOIN sys.master_files AS R ON
                D.database_id = R.database_id AND
                R.type_desc = 'ROWS'
        WHERE
            LEFT(L.physical_name, 1) = LEFT(R.physical_name, 1)
            AND D.name = '${Database}'
        ORDER BY
            D.name"
    )

    use QResult = Query.Execute()
    QResult.Next()

    return new DatabaseFiles(
        QResult.Get("DataFileName").ToString(),
        QResult.Get("DataFilePath").ToString(),
        QResult.Get("LogFileName").ToString(),
        QResult.Get("LogFilePath").ToString()
    )
;

method RestoreBackup(Connection: SqlConnection, DatabaseFiles: DatabaseFiles, FullBackup: FullBackup, NewDatabaseName: String)
    val DefaultLocations = GetDatabaseDefaultLocations(Connection)
    val MdfPath = IO.JoinPath(DefaultLocations.Data, "${NewDatabaseName}.mdf")
    val LogPath = IO.JoinPath(DefaultLocations.Log, "${NewDatabaseName}_log.ldf")
    
    val Query = Connection.CreateQueryWithoutSelect(
        "RESTORE DATABASE [${NewDatabaseName}] FROM  DISK = N'${FullBackup.Path}' 
        WITH MOVE N'${DatabaseFiles.DataFileName}' TO N'${MdfPath}',  
            MOVE N'${DatabaseFiles.LogFileName}' TO N'${LogPath}'
        REPLACE;")

    Query.Execute()
;

method GetDatabaseDefaultLocations(Connection: SqlConnection): DefaultDatabaseFilesLocation
    val Result = GetDatabaseFileNames(Connection, "master")

    return new DefaultDatabaseFilesLocation(
        IO.GetParentDirectory(Result.DataFilePath), 
        IO.GetParentDirectory(Result.LogFilePath))    
;

method BuildConnection(
    Server: String,
    Database: String,
    User: String,
    Password: String): SqlConnection
    return new SqlConnection("jdbc:sqlserver://${Server};encrypt=false;databaseName=${Database};user=${User};password=${Password};")
;

structure DatabaseFiles
    val DataFileName: String
    val DataFilePath: String
    val LogFileName: String
    val LogFilePath: String
;

structure FullBackup
    val Path: String
;

structure DefaultDatabaseFilesLocation
    val Data: String
    val Log: String
;