#required Processes.sbsl
#required V8.sbsl
#required IO.sbsl
#required SshAgentConnection.sbsl
#required Net.sbsl

@Global
method GetConfigurationInfo(
    PlatformVersion: String,
    Server: String,
    Infobase: String,
    User: String,
    Password: String)
    val SshAgentBaseDir = Files.CreateTempDirectory()
    val SshAgent = StartSshAgent(PlatformVersion, Server, Infobase, SshAgentBaseDir.Path)
    
    try 
        if Net.LocalPortIsOpen(1543, 10)
            val ConfigFile = Files.Create(IO.JoinPath(SshAgentBaseDir.Path, "0" + Files.SeparatorSymbol + "files-to-upload.txt"))
            IO.WriteTextToFile(ConfigFile.Path, "Configuration")

            use Connection = SshAgentConnection.Open(User, Password)

            SshAgentConnection.ConnectIB(Connection)
            SshAgentConnection.UploadConfiguration(Connection, ConfigFile.Name)
            SshAgentConnection.Close(Connection)
        else
            Console.Write("Waiting for the opening port timeout is expired")
        ;   
    finally
        SshAgent.Stop()   
    ;
;

@Global
method UpdateConfiguration(
    PlatformVersion: String,
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    CfuPath: String): Number
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    val OutFile = Files.CreateTempFile()

    val Args = DesignerBatchModeArguments(
        Server,
        Infobase,
        User,
        Password,
        AccessCode
    )
    Args.Add("/Out\"${OutFile}\"")
    Args.Add("/UpdateCfg\"${CfuPath}\" -force -NoCheck")
    Args.Add("/UpdateDBCfg -Dynamic- -Server -SessionTerminate force")
    
    val ExitCode = Processes.Run(Platform.ExecutablePath, Args)
    RedirectOutToConsole(OutFile)

    return ExitCode
;

@Global
method UpdateExtension(
    PlatformVersion: String,
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    ExtensionName: String,
    ExtensionPath: String): Number
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    val OutFile = Files.CreateTempFile()

    val Args = DesignerBatchModeArguments(
        Server,
        Infobase,
        User,
        Password,
        AccessCode
    )
    Args.Add("/Out\"${OutFile}\"")

    if new File(ExtensionPath).Extension.ToUpperCase() == "CFE"
        Args.Add("/LoadCfg\"${ExtensionPath}\" -Extension\"${ExtensionName}\"")
    else
        Args.Add("/LoadConfigFromFiles\"${ExtensionPath}\" -Extension\"${ExtensionName}\" -NoCheck")
    ;

    Args.Add("/UpdateDBCfg -Dynamic- -Server -SessionTerminate force")
    
    val ExitCode = Processes.Run(Platform.ExecutablePath, Args)
    RedirectOutToConsole(OutFile)

    return ExitCode
;

@Global
method StartSshAgent(
    PlatformVersion: String,
    Server: String,
    Infobase: String,
    AgentBaseBir: String = "",
    Port: Number = 1543): OsProcess
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    if AgentBaseBir.Length() == 0
        AgentBaseBir = Files.CreateTempDirectory().Path
    ;

    val Args = [
        "DESIGNER",
        "/S ${Server}\\${Infobase}",
        "/AgentMode",
        "/AgentPort ${Port.ToString().Replace(" ", "")}",
        "/AgentSSHHostKeyAuto",
        "/AgentBaseDir ${AgentBaseBir}"
    ]
    val Process = new OsProcess(Platform.ExecutablePath, Args, True)
    Process.Start()

    return Process
;

method RedirectOutToConsole(OutFile: File)
    use OutputStream = OutFile.OpenReadableStream()
    val OutputStreamContent = OutputStream.ReadAsString()

    if (OutputStreamContent.Length() > 0)
        Console.Write(OutputStreamContent)
    ;
;

method DesignerBatchModeArguments(
    Server: String, 
    Infobase: String, 
    User: String, 
    Password: String,
    AccessCode: String = ""): Array<String>
    val Args = [
        "DESIGNER",
        "/S${Server}\\${Infobase}",
        "/N${User}",
        "/P${Password}",
        "/DisableStartupMessages",
        "/DisableStartupDialogs"
    ]

    if AccessCode.Length() > 0
        Args.Add("/UC${AccessCode}")
    ;

    return Args
;

structure ConfigInfo
    val Name: String
    val Version: String
;