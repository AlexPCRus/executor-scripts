#required Processes.sbsl
#required V8.sbsl

@Global
method UpdateConfiguration(
    PlatformVersion: String,
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    CfuPath: String): Number
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    val OutFile = Files.CreateTempFile()

    val Args = [
        "DESIGNER",
        "/S${Server}\\${Infobase}",
        "/N${User}",
        "/P${Password}",
        "/DisableStartupMessages",
        "/DisableStartupDialogs",
        "/Out\"${OutFile}\"",
        "/UC${AccessCode}",
        "/UpdateCfg\"${CfuPath}\"",
        "-force",
        "/UpdateDBCfg",
        "-Dynamic-",
        "-Server",
        "-SessionTerminate force"
    ]
    
    val ExitCode = Processes.Run(Platform.ExecutablePath, Args)
    RedirectOutToConsole(OutFile)

    return ExitCode
;

@Global
method UpdateExtension(
    PlatformVersion: String,
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    ExtensionName: String,
    ExtensionArchive: String): Number
    val Platform = V8.GetInstalledPlatform(PlatformVersion)

    val OutFile = Files.CreateTempFile()

    val Args = [
        "DESIGNER",
        "/S${Server}\\${Infobase}",
        "/N${User}",
        "/P${Password}",
        "/DisableStartupMessages",
        "/DisableStartupDialogs",
        "/Out\"${OutFile}\"",
        "/UC${AccessCode}",
        "/LoadConfigFromFiles\"${ExtensionArchive}\"",
        "-Extension\"${ExtensionName}\"",
        "-NoCheck",
        "/UpdateDBCfg",
        "-Dynamic-",
        "-Server",
        "-SessionTerminate force"
    ]
    
    val ExitCode = Processes.Run(Platform.ExecutablePath, Args)
    RedirectOutToConsole(OutFile)

    return ExitCode
;

method RedirectOutToConsole(OutFile: File)
    use OutputStream = OutFile.OpenReadableStream()
    val OutputStreamContent = OutputStream.ReadAsString()

    if (OutputStreamContent.Length() > 0)
        Console.Write(OutputStreamContent)
    ;
;