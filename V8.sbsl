#required IO.sbsl 
#required Net.sbsl

@Global
method GetInstalledPlatforms(): Array<V8Platform>
    val Items = new Array<V8Platform>()

    val onecRootFolder = new File("1cv8", ExecutionEnvironment.GetVariable("ProgramFiles"))

    val pattern = new Pattern("\\d+\\.\\d+\\.\\d+\\.\\d+")
    val platfromPaths = onecRootFolder.Children.Filter(c -> pattern.FindMatches(c.Name, 1).Size() > 0)
    
    for children in platfromPaths
        val item = new V8Platform()
        item.Version = children.Name
        item.Architecture = Arch.X64
        item.BinPath = IO.JoinPath(children.Path, "bin")
        item.ExecutablePath = IO.JoinPath(item.BinPath, "1cv8.exe")
        
        val ibsrvExecutable = new File(IO.JoinPath(item.BinPath, "ibsrv.exe"))
        if ibsrvExecutable.Exists()
            item.HasStandaloneServer = True
            item.IbsrvPath = ibsrvExecutable.Path
            item.IbcmdPath = IO.JoinPath(item.BinPath, "ibcmd.exe")
        ;

        Items.Add(item)
    ;

    return Items.SortBy(c -> c.Version)
;

@Global
method GetInstalledPlatform(Version: String = ""): V8Platform?
    if Version == ""
        return GetHighestInstalledPlatform()
    else
        return GetInstalledPlatforms().Filter(c -> c.Version == Version).Last()
    ;
;

@Global
method GetHighestInstalledPlatform(): V8Platform?
    val platforms = V8.GetInstalledPlatforms()
    return platforms.Last()
;

@Global
enum Arch
    X86,
    X64
;

@Global
method StartSshAgent(
    InstalledPlatform: V8Platform,
    Server: String,
    Infobase: String,
    AgentBaseBir: File,
    Port: Number = 1545): OsProcess
    val args = [
        "DESIGNER",
        "/S ${Server}",
        "/IBName ${Infobase}",
        "/AgentMode",
        "/AgentPort ${Port.ToString().Replace(" ", "")}",
        "/AgentSSHHostKeyAuto",
        "/AgentBaseDir ${AgentBaseBir.Path}"
    ]
    val Process = new OsProcess(InstalledPlatform.ExecutablePath, args, True)
    Process.Start()

    return Process
;

@Global
method WaitSshAgentIsStarted(Port: Number = 1545, TimoutSeconds: Number): Boolean
    return Net.LocalPortIsOpen(Port, TimoutSeconds)
;

@Global
method ThrowIfHasNoStandaloneServer(Platform: V8Platform)
    if not Platform.HasStandaloneServer
        throw new IllegalStateException("Platform installation doesn't contains standalone server executable")
    ;
;

@Global
structure V8Platform
    var Version: String = ""
    var Architecture: Arch = Arch.X64 
    var BinPath: String = ""
    var ExecutablePath: String = ""
    var HasStandaloneServer: Boolean = False
    var IbsrvPath: String = ""
    var IbcmdPath: String = ""
;