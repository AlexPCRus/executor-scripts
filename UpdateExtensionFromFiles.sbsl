#required Common/Log.sbsl
#required Common/V8Database.sbsl
#required Common/Sql.sbsl
#required Common/V8.sbsl
#required Common/Path.sbsl
#required Common/BatchMode.sbsl
#required Common/Ras.sbsl
#required Common/Zip.sbsl

// Method expects to get a path to the zip archive in the "ExtensionPath" parameter
method Script(
    Server: String, 
    Infobase: String, 
    User: String, 
    Password: String,
    SqlUser: String,
    SqlPassword: String,
    ExtensionPath: String,
    AccessCode: String,
    PlatformVersion = ""): Number
    use Connection = Sql.BuildConnection(Server, Infobase, SqlUser, SqlPassword)
    val Database = V8Database.NewInstance(Connection)

    if not Path.IsFile(ExtensionPath) and not Path.ExtensionIs(ExtensionPath, "zip")
        Log.e("ExtensionPath parameter must be a path to the zip archive")
    ;

    Log.i("Unpacking the extension archive")
    val ExtensionFolder = Files.CreateTempDirectory()
    Zip.ExtractToDirectory(ExtensionPath, ExtensionFolder.Path)
    ExtensionPath = ExtensionFolder.Path

    val ConfigurationFilePath = Path.Join(ExtensionPath, "Configuration.xml")

    if not Path.Exists(ConfigurationFilePath)
        Log.e("Couldn't find \"Configuration.xml\" file")
    ;

    val NewExtensionInfo = V8.ConfigInfoFromConfiguration(ConfigurationFilePath)

    if not Database.HasExtension(NewExtensionInfo.Name)
        Log.e("Extension \"${NewExtensionInfo.Name}\" is not connected to the infobase \"%Infobase\"")
    ;

    val ConfigInfo = Database.GetConfigInfo()
    var ExpectingConfigVersion = V8.ConfigurationVersionFromExtensionVersion(NewExtensionInfo.Version)
    if ConfigInfo.Version != ExpectingConfigVersion
        Log.e("Extension version (%ExpectingConfigVersion) targets to other configuration version (${ConfigInfo.Version})")
    ;

    val ConnectedExtensionInfo = Database.GetExtensionInfo(NewExtensionInfo.Name)
    if not V8.VersionIsUpper(ConnectedExtensionInfo.Version, NewExtensionInfo.Version)
        Log.e("It doesn't need to update extension (Current: ${ConnectedExtensionInfo.Version}, New: ${NewExtensionInfo.Version})")
    ;

    Log.i("Blocking connections")
    Ras.BlockConnections(Infobase, User, Password, AccessCode)

    Log.i("Updating extension (%Server/%Infobase/${NewExtensionInfo.Name})")
    BatchMode.UpdateExtension(Server, Infobase, User, Password, AccessCode, NewExtensionInfo.Name, ExtensionPath, PlatformVersion)

    Log.i("Unblocking connections")
    Ras.UnblockConnections(Infobase, User, Password)

    return 0
;