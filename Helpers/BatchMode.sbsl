#required ProcessHelper.sbsl
#required V8Util.sbsl

@Global
method UpdateConfiguration(
    Platform: V8Util.V8Platform,
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    CfuPath: String): Number
    val OutFile = Files.CreateTempFile()

    val args = [
        "DESIGNER",
        "/S${Server}\\${Infobase}",
        "/N${User}",
        "/P${Password}",
        "/DisableStartupMessages",
        "/DisableStartupDialogs",
        "/Out\"${OutFile}\"",
        "/UC${AccessCode}",
        "/UpdateCfg\"${CfuPath}\"",
        "-force",
        "/UpdateDBCfg",
        "-Dynamic-",
        "-Server",
        "-SessionTerminate force"
    ]
    val Process = new OsProcess(Platform.ExecutablePath, args, True)
    Process.Start()
    ProcessHelper.WaitForCompletionAndReadOutput(Process)
    Process.Stop()

    var ExitCode = Process.GetExitCode()
    if ExitCode > 0
        Console.WriteError("Failed to update infobase (${ExitCode})")
    else
        Console.Write("${Infobase} is successfully updated")
    ;

    use OutputStream = OutFile.OpenReadableStream()
    val OutputStreamText = OutputStream.ReadAsString()
    if (OutputStreamText.Length() > 0)
        Console.Write(OutputStreamText)
    ;

    return Process.GetExitCode()
;

@Global
method UpdateExtension(
    Platform: V8Util.V8Platform,
    Server: String,
    Infobase: String,
    User: String,
    Password: String,
    AccessCode: String,
    ExtensionName: String,
    ExtensionArchive: String): Number
    val OutFile = Files.CreateTempFile()

    val args = [
        "DESIGNER",
        "/S${Server}\\${Infobase}",
        "/N${User}",
        "/P${Password}",
        "/DisableStartupMessages",
        "/DisableStartupDialogs",
        "/Out\"${OutFile}\"",
        "/UC${AccessCode}",
        "/LoadConfigFromFiles\"${ExtensionArchive}\"",
        "-Extension\"${ExtensionName}\"",
        "-NoCheck",
        "/UpdateDBCfg",
        "-Dynamic-",
        "-Server",
        "-SessionTerminate force"
    ]
    val Process = new OsProcess(Platform.ExecutablePath, args, True)
    Process.Start()
    ProcessHelper.WaitForCompletionAndReadOutput(Process)
    Process.Stop()

    var ExitCode = Process.GetExitCode()
    if ExitCode > 0
        Console.WriteError("Failed to update extension ${ExtensionName} in ${Infobase}")
    else
        Console.Write("Extension \"${ExtensionName}\" in ${Infobase} is successfully updated")
    ;

    use OutputStream = OutFile.OpenReadableStream()
    val OutputStreamText = OutputStream.ReadAsString()
    if (OutputStreamText.Length() > 0)
        Console.Write(OutputStreamText)
    ;

    return Process.GetExitCode()
;